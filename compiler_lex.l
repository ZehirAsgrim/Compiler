/* Definition section */
%{
#include "y.tab.h"	/* header file generated by bison */
extern YYSTYPE yylval; //YYSTYPE
%}

/* Define regular expression label */
newline		[\n]
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
double      {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     {return '+';}
"-" 	{return '-';}
"*" 	{return '*';}
"/" 	{return '/';}
"%"     {return '%';}
"++"    {return INC;}
"--"    {return DEC;}

 /* Relational */
">"		{return '>';}
"<"		{return '<';}
">="	{return GREEQU;}
"<="	{return LESEQU;}
"=="	{return EQUAL;}
"!="	{return NOTEQU;}

 /* Assignment */
"="		{return '=';}
"+="	{return ADDASI;}
"-="	{return SUBASI;}
"*="	{return MULASI;}
"/="	{return DIVASI;}
"%="	{return MODASI;}

 /* Logical */
"&&"	{return CONAND;}
"||"	{return CONOR;}
"!"		{return '!';}

 /* Delimiters */
"("		{return '(';}
")"		{return ')';}
"{"		{return '{';}
"}"		{return '}';}

 /* Print Keywords */	
"print"		{return PRINT;}
"println"	{return PRINTLN;}

 /* Condition and Loop Keywords */
"if"		{return IF;}
"else"		{return ELSE;}
"for"		{return FOR;}

 /* Declaration Keywords */
"var"		{return VAR;}
"void"		{return VOID;}
"int"		{yylval.string = strdup(yytext); return INT;}
"float32"	{yylval.string = strdup(yytext); return FLOAT;}

 /* String Constant */
\"				        { BEGIN STRING_STATE;}
<STRING_STATE>\"		{ BEGIN INITIAL;}
<STRING_STATE>[^"]*		{yylval.string = strdup(yytext); return STRING;}

 /* Number Constant */
{integer}	{yylval.i_val = atoi(yytext); return I_CONST;}
{double}	{yylval.f_val = atof(yytext); return F_CONST;}

 /* C type Comment */
"/*"				{ BEGIN COMMENT; }
<COMMENT>[^*\n]+	{;}
<COMMENT>\n			{;}
<COMMENT>"*"		{;}
<COMMENT>"*/"		{ BEGIN INITIAL; }

 /* C++ type Comment */
\/\/.*	{;}

 /* Variable ID */
 {id}       {yylval.string = strdup(yytext); return ID;}

 /* others */

[\n]		{return NEWLINE;}
";"			{return ';';}
[ \t]		{;} /* Ignore */
[^; \t] 	{;} /* Ignore other charactor sets */
<<EOF>>     { static int once = 0; return once++ ? 0 : NEWLINE; }

%%

int yywrap()
{
    return 1;
}
